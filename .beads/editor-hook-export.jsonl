{"id":"editor-hook-1","title":"Open tmux session on Ctrl-G","description":"Replace simple emacs proxy with tmux session launcher. When Ctrl-G is pressed, open a tmux session. Need to handle: 1) temp file editing for Claude Code prompt, 2) session management (attach vs create), 3) clean exit back to Claude Code","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-29T01:26:56.434703528Z","updated_at":"2025-10-29T01:41:58.959322799Z","closed_at":"2025-10-29T01:41:58.959322799Z"}
{"id":"editor-hook-10","title":"Add project-level and global configuration system","description":"Support configuration files at: 1) Project level: .claude/editor-hook.yaml, 2) Global level: ~/.claude/editor-hook.yaml. Project config supersedes global. Config should specify: default launcher, available launchers, keybindings, etc. Use yq for YAML parsing.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T01:42:02.703979056Z","updated_at":"2025-10-29T01:42:02.703979056Z"}
{"id":"editor-hook-11","title":"Research tmux-native menu system for launcher selection","description":"Investigate tmux display-menu command for creating interactive menus. This would let us build the launcher selection (batcat/emacs/vim/nano) using pure tmux instead of external tools like fzf. Example: tmux display-menu for file action selection.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-29T03:56:25.306148835Z","updated_at":"2025-10-29T04:04:49.540218034Z","closed_at":"2025-10-29T04:04:49.540218034Z"}
{"id":"editor-hook-12","title":"Remove Pattern 3 (Persistent Session) - doesn't work for temp files","description":"Pattern 3 tries to persist sessions but Claude Code uses different temp files each time, so persistence doesn't make sense. Remove this pattern from the script and update documentation.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-29T05:02:30.488287271Z","updated_at":"2025-10-29T05:02:30.488287271Z"}
{"id":"editor-hook-13","title":"Multi-pane layout: prompt editor + live log viewers","description":"Use tmux split panes to show prompt editor in one pane and live server/browser logs in adjacent panes. Allow toggling which logs are visible. Needs configurable tail commands for different projects.","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-29T05:09:56.121078619Z","updated_at":"2025-10-29T05:09:56.121078619Z"}
{"id":"editor-hook-14","title":"Use Claude CLI to generate dynamic menu options","description":"Pipe context through Claude Code CLI to generate intelligent menu options. Could suggest relevant actions based on current prompt context, recent errors, or project state. Creates AI-powered command palette.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T05:10:02.399658896Z","updated_at":"2025-10-29T05:10:02.399658896Z"}
{"id":"editor-hook-15","title":"Configuration system for log sources and tail commands","description":"Create .claude-editor-hook.yaml config file supporting: server log paths, browser console log paths, custom tail commands, log filtering patterns. Per-project and global configs.","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-29T05:10:08.415288921Z","updated_at":"2025-10-29T05:10:08.415288921Z"}
{"id":"editor-hook-16","title":"Drawer-style popup for menu selection with Claude CLI","description":"Open tmux in vertical split creating drawer effect. Use Claude CLI to populate options in the drawer. Select option, drawer closes, action executes. Creates VSCode-like command palette experience with AI suggestions.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T05:10:14.879483844Z","updated_at":"2025-10-29T05:10:14.879483844Z"}
{"id":"editor-hook-17","title":"Persistent workspace session with context panes","description":"Create persistent tmux session that stays alive across Ctrl-G invocations. Layout: main editor pane + sidebar with server logs + bottom pane with browser console. Switch between 'focus mode' (editor only) and 'debug mode' (full layout).","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-29T05:10:22.230792425Z","updated_at":"2025-10-29T05:10:22.230792425Z"}
{"id":"editor-hook-18","title":"Multi-select checkbox menu for toggling features","description":"Menu that allows selecting multiple options with checkboxes: [ ] Show server logs [ ] Show browser console [ ] Enable auto-refresh [ ] Compact mode. Execute all selected actions together.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T05:10:27.478772742Z","updated_at":"2025-10-29T05:10:27.478772742Z"}
{"id":"editor-hook-19","title":"Prompt enhancement agent via Ctrl-G menu option","description":"Pattern 2 now includes 'Open in Claude' option. When selected, spawns new Claude instance as prompt enhancement agent. Agent reads rough prompt (e.g., 'Fix auth'), investigates codebase for context (files, issues, commits), and rewrites prompt with specific paths and details. When agent exits, enhanced prompt returns to original Claude instance for execution.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-29T07:40:16.955374693Z","updated_at":"2025-10-29T08:18:26.08685818Z","closed_at":"2025-10-29T08:18:26.08685818Z"}
{"id":"editor-hook-2","title":"POC: Basic temp file editing works","description":"Hello World - wrapper successfully opens temp file in emacs, Claude Code reads it back. No context support yet.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-29T01:29:06.891005931Z","updated_at":"2025-10-29T01:41:59.722866336Z","closed_at":"2025-10-29T01:41:59.722866336Z"}
{"id":"editor-hook-20","title":"Non-interactive prompt enhancement with claude -p and Haiku","description":"Synchronous prompt enhancement pattern using 'claude -p' (print mode) with Haiku model. User writes template with placeholders (e.g., '*** replace with directory tree ***'), hits Ctrl-G, enhancement happens instantly, and enhanced content returns immediately. No interactive session - just fast placeholder replacement for common patterns like file trees, Beads issues, git status.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-29T07:53:18.624372402Z","updated_at":"2025-10-29T08:18:16.200835842Z","closed_at":"2025-10-29T08:18:16.200835842Z"}
{"id":"editor-hook-21","title":"Improve UX for non-interactive prompt enhancement","description":"The non-interactive enhancement (claude -p with Haiku) works but is currently opaque - user only sees final output after completion. Need to show real-time progress during investigation. Possible approaches: 1) Stream verbose output as it happens, 2) Show progress indicators for each tool call, 3) Display investigation steps (Reading file X, Searching for Y, etc). Currently uses --verbose flag but output isn't visible until completion.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T08:27:34.160387984Z","updated_at":"2025-10-29T08:27:34.160387984Z"}
{"id":"editor-hook-22","title":"Enhanced history viewer (Better Ctrl-O)","description":"Create menu option that analyzes ~/.claude/projects/\u003cproject\u003e/calls/ to show rich, filterable view of recent activity:\n\nFeatures:\n- Parse call history to extract last 10-20 files (read/edited/created/deleted) in past X minutes\n- Show raw message excerpts (truncated with option to expand)\n- Optional: Use Haiku to summarize recent activity\n- Filterable/searchable interface (fzf, batcat, or custom TUI)\n- Allow jumping to specific files or messages\n\nWhy: Improves on Claude Code's limited Ctrl-O history. Ctrl-G becomes leverage point to 'tab out' to rich history view while keeping interactive session alive.\n\nRelated: This is the 'better Ctrl-O' vision - using arbitrary code execution capability to enhance core Claude Code functionality.\n\nImplementation ideas:\n- Parse JSON/msgpack from calls/ directory\n- Extract tool_use blocks with Read/Edit/Write operations\n- Time-based filtering (last 20 mins, last hour, etc)\n- Could show: file paths, line numbers, operation type, timestamps\n- Could integrate with fzf for selection, batcat for preview","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T09:15:48.091073676Z","updated_at":"2025-10-29T09:15:48.091073676Z"}
{"id":"editor-hook-23","title":"Deep dive: TUI frameworks and tmux tricks for context stitching","description":"Research and experimentation with TUI frameworks (Rich, Textual, Elia) and tmux fundamentals to build a sophisticated context viewer.\n\n## Goals\n\n1. **Understand Cafe/Elia chat rendering**\n   - Study how Elia renders chat boxes\n   - Find ways to render chat-like UI in printable/exportable format\n   - Analyze scrollable message lists and conversation views\n\n2. **TUI Framework Deep Dive**\n   - Rich library patterns and capabilities\n   - Textual framework architecture\n   - Elia chat implementation details\n   - How to compose scrollable, stitched-together UI from multiple sources\n\n3. **Context Stitching Vision**\n   Build scrollable entity composed from:\n   - Files from history (last 20 touched)\n   - Command outputs (git log, test results, etc)\n   - Function names/symbols from relevant files\n   - Analyzed objects with mixed content types\n   - Some text sections, some data visualizations\n   - Prompt editor (emacs) in one pane\n\n4. **Tmux Fundamentals \u0026 Tricks**\n   - Better understanding of tmux capabilities\n   - Pane management and layouts\n   - How to do 'sly circus tricks' with pane orchestration\n   - Mixing TUI apps with traditional editors\n   - Dynamic pane splitting and resizing\n   - Capturing pane content and passing between panes\n\n## Research Questions\n\n- Can we render Elia-style chat UI that's also printable/exportable?\n- How to compose scrollable view from heterogeneous data sources?\n- What are tmux's advanced features for pane orchestration?\n- Can TUI apps communicate with emacs panes?\n- How to make context viewer feel like unified experience?\n\n## Deliverables\n\n- Notes on Rich/Textual/Elia architecture (add to memory-bank)\n- Tmux tricks document with examples\n- POC: Simple context stitcher showing files + commands + editor\n- Decision: Which TUI framework to use for context viewer\n\n## Related\n\n- editor-hook-22 (enhanced history viewer) - could use this TUI\n- editor-hook-13 (multi-pane layouts)\n- Command palette paradigm - this is about rich context assembly\n\n## Resources to Explore\n\n- Elia source code (chat rendering)\n- Rich library docs (layout, panels, scrolling)\n- Textual framework (app structure, widgets)\n- Tmux man page (advanced features)\n- Cafe codebase (if relevant to context rendering)","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-29T09:24:05.225304006Z","updated_at":"2025-10-29T09:24:05.225304006Z"}
{"id":"editor-hook-24","title":"UX Pattern: Inline enhancement with modal overlay feedback","description":"Implement UX pattern where Haiku parses prompt with inline markers and shows enhancement in modal overlay before accepting.\n\n## The Pattern\n\nUser writes prompt with markers:\n```\nUpdate the ***authentication flow*** to handle ***session timeout*** better\n```\n\nHit Ctrl-G → Choose enhancement option → Modal overlay appears showing:\n\n┌─────────────────────────────────────────────────────────────┐\n│ Enhancing prompt...                                         │\n│                                                              │\n│ Found markers:                                               │\n│ • ***authentication flow***                                  │\n│ • ***session timeout***                                      │\n│                                                              │\n│ Investigating with Haiku...                                  │\n│ ✓ Found auth.js:42-108 (login handler)                      │\n│ ✓ Found session-manager.js:15 (timeout logic)               │\n│ ✓ Found middleware/auth.ts:87 (token refresh)               │\n│                                                              │\n│ [Press Enter to see enhanced prompt]                        │\n└─────────────────────────────────────────────────────────────┘\n\nThen shows enhanced prompt in scrollable overlay:\n┌─────────────────────────────────────────────────────────────┐\n│ Enhanced Prompt                                [Accept] [Edit] [Cancel]\n│─────────────────────────────────────────────────────────────│\n│ Update the authentication flow (auth.js:42-108,              │\n│ middleware/auth.ts:87) to handle session timeout             │\n│ (session-manager.js:15) better.                              │\n│                                                              │\n│ Current implementation:                                      │\n│ - auth.js:42 handles login with JWT tokens                  │\n│ - session-manager.js:15 sets 30min timeout                   │\n│ - middleware/auth.ts:87 attempts refresh but doesn't         │\n│   handle edge case when refresh token also expired           │\n│                                                              │\n│ Issues found:                                                │\n│ - No graceful degradation when both tokens expired           │\n│ - User gets cryptic 401 instead of re-login prompt           │\n│                                                              │\n│ Related files:                                               │\n│ - auth.js:42-108                                             │\n│ - session-manager.js:15-43                                   │\n│ - middleware/auth.ts:87-120                                  │\n│ - components/LoginModal.tsx:28 (could show here)            │\n│                                                              │\n│ [Scroll for more context...]                                │\n└─────────────────────────────────────────────────────────────┘\n\nUser can:\n- [Accept] - Replace original prompt with enhanced version\n- [Edit] - Open enhanced prompt in emacs to tweak\n- [Cancel] - Go back to original\n\n## Implementation Ideas\n\n1. **Modal Overlay Mechanism**\n   - Leverage tmux display-popup (already discovered pattern)\n   - Or use TUI framework (Textual/Rich) for richer UI\n   - Must be dismissable and scrollable\n\n2. **Haiku Enhancement Pipeline**\n   - Parse prompt for *** or \u003c\u003c\u003c \u003e\u003e\u003e markers\n   - Call claude -p with Haiku for fast investigation\n   - Stream progress updates to modal\n   - Format enhanced prompt with findings\n\n3. **User Acceptance Flow**\n   - Accept: Write enhanced prompt back to temp file\n   - Edit: Open enhanced version in emacs, save to temp file\n   - Cancel: Keep original prompt\n\n4. **Progress Feedback**\n   - Show what Haiku is investigating (\"Reading auth.js...\")\n   - Show findings as they arrive\n   - Final consolidated view with accept/edit/cancel options\n\n## Technical Approaches\n\n**Option A: tmux display-popup (simple)**\n```bash\n# Show progress\ntmux display-popup -E \"bash -c 'haiku-enhance.sh'\"\n\n# Show result in scrollable popup\ntmux display-popup -E \"batcat enhanced-prompt.md\"\n```\n\n**Option B: Textual TUI (rich)**\n- Full TUI app with scrollable panels\n- Progress bar, syntax highlighted code snippets\n- Keyboard shortcuts (a=accept, e=edit, c=cancel)\n\n**Option C: Hybrid**\n- Simple text-based progress in terminal\n- Display final result in fzf with preview pane\n- Accept/Edit/Cancel as fzf options\n\n## Why This Pattern Is Better\n\nCurrent (Pattern 9): Silent enhancement, no feedback\n- User hits Ctrl-G\n- Haiku runs invisibly\n- File is replaced\n- User doesn't know what changed\n\nProposed: Interactive enhancement with approval\n- User sees what Haiku is investigating\n- User reviews enhanced prompt before accepting\n- User can edit/tweak if needed\n- User maintains control and understanding\n\n## Related Issues\n\n- editor-hook-20 (non-interactive enhancement - this improves it)\n- editor-hook-19 (interactive enhancement - different approach)\n- editor-hook-23 (TUI frameworks - could use for modal)\n\n## UX Flow Diagram\n\n```\nUser types prompt with markers\n  ↓\nCtrl-G → Menu → \"Enhance (Interactive Modal)\"\n  ↓\nModal appears: \"Investigating...\"\n  ↓\nProgress updates stream in real-time\n  ↓\nModal shows enhanced prompt + [Accept][Edit][Cancel]\n  ↓\nUser chooses action:\n  Accept → Enhanced prompt replaces original → Return to Claude\n  Edit → Opens emacs with enhanced version → Save → Return to Claude  \n  Cancel → Keep original → Return to Claude\n```\n\n## Example Implementation (Pseudocode)\n\n```bash\n# enhancement-modal.sh\nTEMP_PROMPT=$1\n\n# Show progress modal\ntmux display-popup -E \"bash -c '\n  echo Analyzing prompt...\n  echo\n  \n  # Run Haiku enhancement with progress\n  claude -p --model haiku --verbose 2\u003e\u00261 | while read line; do\n    echo $line\n  done\n  \n  echo\n  echo [Press Enter to see enhanced prompt]\n  read\n'\"\n\n# Show result with actions\nCHOICE=$(echo -e \"Accept\\nEdit\\nCancel\" | fzf --preview \"batcat enhanced-prompt.md\" --preview-window=up:80%)\n\ncase $CHOICE in\n  Accept) cp enhanced-prompt.md $TEMP_PROMPT ;;\n  Edit) emacs -nw enhanced-prompt.md \u0026\u0026 cp enhanced-prompt.md $TEMP_PROMPT ;;\n  Cancel) ;; # Do nothing\nesac\n```\n\n## Success Criteria\n\n- User sees real-time feedback during enhancement\n- User can review changes before accepting\n- User can edit enhanced prompt\n- User can cancel and keep original\n- Feels responsive and interactive\n- Leverages previously discovered modal overlay pattern","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T09:26:54.559021565Z","updated_at":"2025-10-29T09:26:54.559021565Z"}
{"id":"editor-hook-3","title":"Implement context file reading and mode dispatching","description":"Restore ability to read ~/.claude/editor-context.yaml and dispatch to appropriate launcher based on mode field","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-29T01:29:07.861214276Z","updated_at":"2025-10-29T01:29:07.861214276Z"}
{"id":"editor-hook-4","title":"Design sequential flow: show context then edit prompt","description":"Option 1 approach: Show context viewer (menu/batcat/logs) first, when user exits, THEN open emacs on temp file for prompt editing. Keeps both workflows separate and clear.","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-29T01:29:08.827476303Z","updated_at":"2025-10-29T01:29:08.827476303Z"}
{"id":"editor-hook-5","title":"Design hybrid tmux: context + prompt editing in split panes","description":"Option 3 approach: Top pane shows context files (read-only), bottom pane edits temp prompt file. User can reference context while writing prompt.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T01:29:16.979854509Z","updated_at":"2025-10-29T01:29:16.979854509Z"}
{"id":"editor-hook-6","title":"Add configuration system for launcher behavior","description":"Allow users to configure how launchers handle temp file: ignore it, edit it after viewing, edit it alongside context, etc. Make system flexible and configurable.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T01:29:17.759091149Z","updated_at":"2025-10-29T01:29:17.759091149Z"}
{"id":"editor-hook-7","title":"MCP tool for Claude to write context files","description":"Create MCP server that gives Claude a tool to write context files directly without file I/O. Makes it seamless for Claude to prepare views.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-29T01:29:18.499097233Z","updated_at":"2025-10-29T01:29:18.499097233Z"}
{"id":"editor-hook-8","title":"Add debug logging to editor hook script","description":"Script fails silently when invoked. Add logging to /tmp/claude-editor-hook.log to capture: 1) script invocation with args, 2) environment vars, 3) commands being executed, 4) exit codes. This will help debug the current tmux proxy failure.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-29T01:34:57.131245863Z","updated_at":"2025-10-29T01:42:00.850965176Z","closed_at":"2025-10-29T01:42:00.850965176Z"}
{"id":"editor-hook-9","title":"Interactive menu launcher for choosing editor/viewer","description":"Create a menu system (using fzf, dialog, or simple bash select) that lets user choose how to open files: 1) batcat for viewing, 2) emacs for editing, 3) vim for editing, 4) nano for editing. Menu should show file context and allow quick selection.","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-29T01:42:01.768803361Z","updated_at":"2025-10-29T01:42:01.768803361Z"}
