#!/usr/bin/env bash

# Debug logging
LOG="/tmp/claude-editor-hook.log"
echo "=== $(date) ===" >> "$LOG"
echo "Args: $@" >> "$LOG"
echo "TMUX: $TMUX" >> "$LOG"

# Store the file path
FILE="$1"

# Read pattern from config file (project-level or global)
PATTERN="${EDITOR_HOOK_PATTERN:-1}"  # Default to 1, or env var if set

# Check for project-level config first (takes precedence)
if [ -f ".claude-editor-hook.conf" ]; then
    source ".claude-editor-hook.conf"
    echo "Loaded config from: .claude-editor-hook.conf" >> "$LOG"
# Then check for global config
elif [ -f "$HOME/.claude-editor-hook.conf" ]; then
    source "$HOME/.claude-editor-hook.conf"
    echo "Loaded config from: ~/.claude-editor-hook.conf" >> "$LOG"
else
    echo "No config file found, using default or env var" >> "$LOG"
fi

echo "Using pattern: $PATTERN" >> "$LOG"

# Unset TMUX to allow nested sessions
unset TMUX

case "$PATTERN" in
    1)
        # Pattern 1: Simple emacs exec (like working nano pattern)
        echo "Pattern 1: Simple emacs exec" >> "$LOG"
        exec tmux new-session emacs -nw "$FILE"
        ;;

    2)
        # Pattern 2: display-popup + fzf (Interactive Picker)
        echo "Pattern 2: fzf popup menu" >> "$LOG"

        # Create menu data
        MENU="Edit with Emacs:emacs -nw \"$FILE\"
Edit with Vi:vi \"$FILE\"
Edit with Nano:nano \"$FILE\""

        # Show popup with fzf and execute selection
        exec tmux new-session bash -c "
            choice=\$(echo '$MENU' | fzf --height=10 --prompt='Command: ' --border --reverse)
            if [ -n \"\$choice\" ]; then
                cmd=\$(echo \"\$choice\" | cut -d: -f2)
                exec bash -c \"\$cmd\"
            fi
        "
        ;;

    3)
        # Pattern 3: Persistent Popup Session (Dismissable)
        echo "Pattern 3: Persistent popup session" >> "$LOG"
        SESSION="_editor_popup_$$"

        # Create persistent session if it doesn't exist
        if ! tmux has-session -t "$SESSION" 2>/dev/null; then
            tmux new-session -d -s "$SESSION" emacs -nw "$FILE"
            tmux set-option -t "$SESSION" status off
        fi

        # Attach in popup mode
        exec tmux attach -t "$SESSION"
        ;;

    4)
        # Pattern 4: Simple Default + Tmux Keybinding Menu
        echo "Pattern 4: Default + tmux keybinding menu" >> "$LOG"

        # Create temp tmux conf with menu binding
        TMUX_CONF=$(mktemp)
        cat > "$TMUX_CONF" <<EOF
# Prefix is Ctrl-A (default Ctrl-B conflicts with many editors)
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# Bind Ctrl-A m to show menu
bind-key m display-menu -T "Switch Tool" -x C -y C \
    "Emacs" e "respawn-pane -k 'emacs -nw \"$FILE\"'" \
    "Vi" v "respawn-pane -k 'vi \"$FILE\"'" \
    "Nano" n "respawn-pane -k 'nano \"$FILE\"'" \
    "Batcat" b "respawn-pane -k 'batcat \"$FILE\"'"
EOF

        exec tmux -f "$TMUX_CONF" new-session emacs -nw "$FILE"
        ;;

    5)
        # Pattern 5: Split Pane Layout with Menu
        echo "Pattern 5: Split pane with menu" >> "$LOG"

        exec tmux new-session bash -c "
            # Show menu
            echo '━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'
            echo 'Commands: (e)macs | (v)i | (n)ano | (b)atcat'
            echo '━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'
            echo 'Press key to launch editor...'
            echo ''

            # Wait for keypress
            read -n1 choice

            # Launch editor
            case \$choice in
                e) exec emacs -nw '$FILE' ;;
                v) exec vi '$FILE' ;;
                n) exec nano '$FILE' ;;
                b) exec batcat '$FILE' ;;
                *) exec emacs -nw '$FILE' ;;
            esac
        "
        ;;

    6)
        # Pattern 6: Pre-launch Selection (External Menu)
        echo "Pattern 6: Pre-launch bash select menu" >> "$LOG"

        # Show menu using simple bash select
        PS3="Choose editor: "
        options=("Emacs" "Vi" "Nano" "Batcat")

        select opt in "${options[@]}"; do
            case $opt in
                "Emacs") EDITOR_CMD="emacs -nw \"$FILE\""; break ;;
                "Vi") EDITOR_CMD="vi \"$FILE\""; break ;;
                "Nano") EDITOR_CMD="nano \"$FILE\""; break ;;
                "Batcat") EDITOR_CMD="batcat \"$FILE\""; break ;;
                *) echo "Invalid option"; continue ;;
            esac
        done

        exec tmux new-session bash -c "$EDITOR_CMD"
        ;;

    7)
        # Pattern 7: run-shell with Command Execution
        echo "Pattern 7: run-shell with command execution" >> "$LOG"

        # Create wrapper scripts for each command
        TMPDIR=$(mktemp -d)

        cat > "$TMPDIR/editor-emacs.sh" <<EOF
#!/bin/bash
exec emacs -nw "$FILE"
EOF
        chmod +x "$TMPDIR/editor-emacs.sh"

        cat > "$TMPDIR/editor-vi.sh" <<EOF
#!/bin/bash
exec vi "$FILE"
EOF
        chmod +x "$TMPDIR/editor-vi.sh"

        cat > "$TMPDIR/editor-nano.sh" <<EOF
#!/bin/bash
exec nano "$FILE"
EOF
        chmod +x "$TMPDIR/editor-nano.sh"

        cat > "$TMPDIR/editor-batcat.sh" <<EOF
#!/bin/bash
exec batcat "$FILE"
EOF
        chmod +x "$TMPDIR/editor-batcat.sh"

        # Launch tmux with menu that uses run-shell
        exec tmux new-session bash -c "
            tmux display-menu -T 'Choose Editor' -x C -y C \
                'Emacs' e 'run-shell $TMPDIR/editor-emacs.sh' \
                'Vi' v 'run-shell $TMPDIR/editor-vi.sh' \
                'Nano' n 'run-shell $TMPDIR/editor-nano.sh' \
                'Batcat' b 'run-shell $TMPDIR/editor-batcat.sh'

            # Cleanup temp dir
            rm -rf '$TMPDIR'
        "
        ;;

    8)
        # Pattern 8: Hybrid - Menu then Respawn
        echo "Pattern 8: Hybrid menu then respawn" >> "$LOG"

        # Create temp config
        CONF=$(mktemp)
        cat > "$CONF" <<EOF
bind-key e respawn-pane -k "emacs -nw '$FILE'"
bind-key v respawn-pane -k "vi '$FILE'"
bind-key n respawn-pane -k "nano '$FILE'"
bind-key b respawn-pane -k "batcat '$FILE'"
EOF

        exec tmux -f "$CONF" new-session bash -c "
            tmux display-menu -T 'Choose Editor' -x C -y C \
                'Emacs' e 'send-keys e' \
                'Vi' v 'send-keys v' \
                'Nano' n 'send-keys n' \
                'Batcat' b 'send-keys b'

            # Hold session open
            sleep infinity
        "
        ;;

    *)
        # Default to Pattern 1 if invalid pattern specified
        echo "Invalid pattern '$PATTERN', defaulting to Pattern 1" >> "$LOG"
        exec tmux new-session emacs -nw "$FILE"
        ;;
esac
